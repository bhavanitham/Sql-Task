-- Retrieve all customers who have placed an order in the last 30 days. --
SELECT DISTINCT c.name, c.email
FROM customers c
JOIN orders o ON c.id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

-- Get the total amount of all orders placed by each customer. --
SELECT c.name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.id;

-- Update the price of Product C to 45.00. --
UPDATE products
SET price = 45.00
WHERE name = 'Product C';

-- Add a new column discount to the products table. --
ALTER TABLE products
ADD COLUMN discount DECIMAL(5, 2) DEFAULT 0.00;

-- Retrieve the top 3 products with the highest price. --
SELECT name, price
FROM products
ORDER BY price DESC
LIMIT 3;

-- Get the names of customers who have ordered Product A. --
SELECT DISTINCT c.name
FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id
WHERE p.name = 'Product A';

-- Join the orders and customers tables to retrieve the customer's name and order date for each order. --
SELECT c.name, o.order_date
FROM orders o
JOIN customers c ON o.customer_id = c.id;

-- Retrieve the orders with a total amount greater than 150.00. --
SELECT * 
FROM orders
WHERE total_amount > 150.00;

-- Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table. --
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

-- Retrieve the average total of all orders. --
SELECT AVG(total_amount) AS average_order_amount
FROM orders;